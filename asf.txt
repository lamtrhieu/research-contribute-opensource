This was originally posted on the Tomcat DEV list, but applies equally well to any Jakarta subproject.

Michael Percy wrote:

> I believe there would be (or at least SHOULD be! :) many
> more contributors to these projects (Tomcat), but maybe 
> some of us are intimidated by the level of apparent 
> expertise required for this stuff. (Then again, I know 
> we have some damn good people on these lists.) I am 
> curious, is this the case? Have you all been writing 
> java apps for years and are steeped in C++ and OOP for 
> the last decade? Do you have the servlet spec pasted on 
> your wall?
Michael,

In my particular case the servlet spec is pasted on the inside of my eyeballs :-) But I'm kind of a wierd case in that respect, because I'm on the JSR-053 expert group that worked on the new specs (servlet 2.3 / JSP 1.2).

Personally, I've been a software developer/designer/architect in some fashion or another for more years (and in more languages) than I care to admit. But I got involved in the Apache JServ project (predecessor to Tomcat) a few years ago when I needed a cheap server solution for an Internet-based application that I needed to build. Like everyone, I was grumbling about how long it took for JServ to get to final release (over a year from 0.9 to 1.0), until my son -- who likes PHP but I love him anyway :-) -- said "Dad, you know Java, get in there and help them finish it!". So I did.

I wouldn't worry to much about expertise (although clearly Java is a must, and familiarty with the specifications that Tomcat implements -- servlet, JSP, HTTP, etc. -- is vital on this particular project). The ways that people get involved in open source are pretty varied, but a common course might go something like this:

You see something that you think should be added, or that doesn't seem to work quite right
You investigate the existing code, becoming more familiar with it along the way
You might ask a "what would you think if we did this?" type question on the developer list
You contribute to the discussion of these ideas (yours and others) - partly to gain knowledge but also partly to become known to the community
At some point, you propose a patch, or a new chunk of code that gets accepted into the code base (the detailed rules for Tomcat are on the Jakarta web site)
Iterate the above a few times, perhaps looking at bigger and bigger chunks of code as you gain more understanding
At some point, when it is evident that you're not a bozo :-), you can get nominated for committer status and voted on by the developer community, and then be able to post the changes directly yourself.
> How can I, a perl hacker and aspiring java coder get 
> involved? (How do you guys know what to do?) At what 
> point would I be considered to be "good enough" to 
> really contribute some code? Server-side java simply 
> rocks, and if I could help make it a more viable  
> option for everyone (including myself and my company)
>  then I would love to do it.
It all starts by becoming familiar enough with the current code base to start understanding it. In most open source projects there is never enough architectural documentation, so this often involves asking "how does this work" type questions on the developer list. Don't feel bad about that -- NONE of us knew anything about Tomcat internals before we started working on it :-)

> Hope this isn't a totally inane question, but it has 
> been on my mind for a couple weeks. Just wondering...
Not at all inane -- I hope the above thoughts help.

> Thanks,
> Mike
Craig

03 Nov 2000



With the opensource system, if you find any deficiency in the project, the onus is on you to redress that deficiency. Opensource projects provide you with the means and mechanism to not only remove inadequecies in any part of the project but also to improve the project. Without this positive feedback loop an opensource project dies. Opensource doesnt improve by advocacy, mindshare, or by having 10 million users, it improves by the participation and contribution from the user community.

What that boils down to is, if you see something wrong and do nothing about it, the opensource system hasnt failed you, *you* have failed the opensource system.

So if I am missing a needed feature in a project and I do nothing about it, it is my own fault for not getting off my lazy arse and taking advantage of the participation opensource allows. One of the things that really annoys me is the continual slagging of some of the other opensource projects that get more media time. It is ok slagging a proprietary product as often you have no other way of getting your neck into the user-development feedback loop. But slagging an opensource project is ignorant. The whole mechanism exists to empower the user. If there is something that would cause that person to slag a project then it means enough to them to do something about it. In simpler words, fix it! :)

As a rule marketers count bodies lol. With a proprietary product, if I like it, the only way I am allowed to participate in it's improvement is by buying it. The more I buy, the more likely it is to be successful and provide me with something stable and persistent in the future to develop and deploy with. The more users that buy the proprietary product, add to that companies ability to improve that product. This includes not only the cost of the development but all the other stuff that goes along with it, like profit, marketing etc. So my buying dollars dont directly go to the improvement of that product, even so lots of users is good for a proprietary products future.

Using Turbine as an opensource example, its continued improvement and success is directly proportional to the user community *participation*. If I contribute something to Turbine then 100% of my "something" has gone to improve Turbine, rather than a tiny percentage of the purchase price I paid for a proprietary product. One contributing user in an opensource project would be worth 10,000 sold units of a proprietary product. In both cases the same amount or value of improvements would result.

For the above reason, the "more users" isn't important in opensource, we all use Turbine for our own reasons. But contributing and participating is definately important for the improvement of an opensource project, and in our case Turbine. Contributing and participating in Turbine is a commonality we should all share :)

Cameron Riley 
criley NO SPAM ekmail.com

